== Welcome to peoplemap

peoplemap is a Rails-based web application designed to support the network-centric collection & analysis of information.  At the moment, this is a very naive implementation with very basic CRUD capabilities.  I've extended some prototyping I did with Andreas Ronge's neo4j wrapper for Ruby to work with a more full domain model, and this is the result.  Feel free to make some suggestions, but bear in mind that this is all just an early, early prototype, and my coding skills are pretty basic!

This project is protected under a Creative Commons Attribution-Noncommercial-Share Alike 2.5 Australia License see http://creativecommons.org/licenses/by-nc-sa/2.5/au/ for more details

This project has just started, so expect a great deal change in these files over coming months.  Nothing is stable yet!!!

THINGS TO DO:
- Maturing the interface & consolidating display logic for common views
- extjs & script.acu.lous libraries for enhanced user experience
- proper ontology support to allow *.owl files to be used for defining relationship hierarchies
- improved relationship property setting (is very limited at present)
- user management
- admin tools
- data visualisation (network visualisation, timeline charts, graphs, etc)
- dataset management (allow users to save collections of nodes/edges)
- reporting/exporting
- data loading tools

== Getting Started

Apologies for the limited install info - I'll try to extend this information in future.  Feel free to contact me if you're trying to get it working.

1. Install Jruby, then Rails, etc
2. Make sure you have neo4j and lucene jars installed into your CLASSPATH
3. Download and add Andreas Ronge's neo4j wrapper and add it to your project vendor/plugins folder - make sure you compile from the latest source - don't use the current gem.

Good luck!

THINGS TO NOTE:
- indexes may not work until you have created at least one instance of each type (person, organisation, location, event, reference) and I haven't gotten round to dealing with this yet.  The easy workaround is to go to <server>/people/new, <server>/organisations/new, etc and create an instance of each...
- Linking is all over the shop as I am mid-way through implementing a new approach to allow date ranges, categories and subcategories, notes, etc.  It will work in places, but exepect a more consistent and generic approach soon...
- the index pages are not designed to handle large volumes yet. I won't implement an indexing, search or recent nodes capabilities for a few iterations yet.

I'm running this in Aptana RadRails, but you can probably get it running in NetBeans, RubyMine etc.


